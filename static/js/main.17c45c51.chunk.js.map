{"version":3,"sources":["../../../React-app/weather-app/src/components/Info/info.js","../../../React-app/weather-app/src/components/Form/form.js","../../../React-app/weather-app/src/components/Weather/weather.js","../../../React-app/weather-app/src/App.js","../../../React-app/weather-app/src/serviceWorker.js","../../../React-app/weather-app/src/index.js"],"names":["Info","props","react_default","a","createElement","Form","onSubmit","weatherMethod","type","name","placeholder","required","Weather","city","className","country","temp","pressure","sunset","API_KEY","App","state","undefined","gettingWeather","_callee","e","error","info","api_url","data","date","sunset_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","Date","setTime","getHours","getMinutes","getSeconds","_this","setState","main","console","log","stop","Info_info","Form_form","this","weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17c45c51.chunk.js","sourcesContent":["import React from 'react';\r\nconst Info = (props) => (\r\n    <div>\r\n        <h2>Погодное Приложение</h2>\r\n        <p>Узнайте погоду вашего города</p>\r\n    </div>\r\n)\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\" required/>\r\n        <button>Получить погоду</button>\r\n    </form>\r\n)\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n        <div>\r\n            { props.city &&\r\n            <div className='infoWeath'>\r\n                <p>Местоположение: {props.city}, {props.country}</p>\r\n                <p>Температура: {props.temp}</p>\r\n                <p>Давление: {props.pressure}</p>\r\n                <p>Восход солнца: {props.sunset}</p>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\nexport default Weather;","import React from 'react';\nimport Info from './components/Info/info'\nimport Form from './components/Form/form'\nimport Weather from './components/Weather/weather'\nimport './App.css';\n\nconst API_KEY = '6ac4639c25cb1cb176cad731e6bc7a1e';\n\nclass App extends React.Component {\n\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n    }\n    gettingWeather = async (e,error, info) => {\n        e.preventDefault();\n        var city = e.target.elements.city.value;\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n\n        var sunset = data.sys.sunset;\n        var date = new Date();\n        date.setTime(sunset);\n        var sunset_date = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n\n        this.setState({\n            temp: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            pressure: data.main.pressure,\n            sunset: sunset_date,\n        });\n        console.log(data);\n    }\n    render() {\n        return (\n            <div>\n                <div className='content'>\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className='col-sm-5 info'>\n                                    <Info />\n                                </div>\n                                <div className='col-sm-7 form'>\n                                    <Form weatherMethod={this.gettingWeather}/>\n                                    <Weather {...this.state} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"area\">\n                    <ul className=\"circles\">\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}